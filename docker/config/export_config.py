#!/usr/bin/env python3
"""
Configuration exporter for MMint FoundationStereo
This script reads the config.yaml file and exports variables in shell format
"""

import yaml
import sys
import os

def load_config(config_path=None):
    """Load configuration from YAML file"""
    if config_path is None:
        # Default to config.yaml in the same directory as this script
        script_dir = os.path.dirname(os.path.abspath(__file__))
        config_path = os.path.join(script_dir, 'config.yaml')
    
    try:
        with open(config_path, 'r') as f:
            return yaml.safe_load(f)
    except FileNotFoundError:
        print(f"Error: Configuration file not found at {config_path}", file=sys.stderr)
        sys.exit(1)
    except yaml.YAMLError as e:
        print(f"Error parsing YAML file: {e}", file=sys.stderr)
        sys.exit(1)

def export_shell_vars(config):
    """Export configuration as shell variables"""
    # Camera configuration
    print(f'export CAMERA_SERIAL_NO="{config["camera"]["serial_no"]}"')
    
    # Network configuration
    print(f'export ROS_HOSTNAME="{config["network"]["ros_hostname"]}"')
    print(f'export ROS_IP="{config["network"]["ros_ip"]}"')
    print(f'export ROS_MASTER_URI="{config["network"]["ros_master_uri"]}"')
    
    # Docker configuration
    print(f'export DOCKER_IMAGE_NAME="{config["docker"]["image_name"]}"')
    print(f'export DOCKER_CUDA_IMAGE="{config["docker"]["cuda_image"]}"')

def export_python_vars(config):
    """Export configuration as Python variables for import"""
    output = []
    output.append("# Auto-generated configuration variables")
    output.append("# Do not edit this file directly, modify config.yaml instead")
    output.append("")
    
    # Topics
    output.append("# ROS Topic Names")
    for key, value in config["topics"].items():
        var_name = f"ROSTOPIC_{key.upper()}"
        output.append(f'{var_name} = "{value}"')
    
    output.append("")
    
    # Frames
    output.append("# Frame Configuration")
    output.append(f'PCD_FRAME = "{config["frames"]["pcd_frame"]}"')
    
    output.append("")
    
    # Extrinsics
    output.append("# Extrinsics")
    extrinsics_str = ", ".join(map(str, config["extrinsics"]["values"]))
    output.append(f'EXTRINSICS_VALUES = [{extrinsics_str}]')
    
    output.append("")
    
    # Processing
    output.append("# Processing Configuration")
    output.append(f'PROCESSING_SCALE = {config["processing"]["scale"]}')
    output.append(f'TIMER_DURATION = {config["processing"]["timer_duration"]}')
    
    return "\n".join(output)

def write_extrinsics_file(config, output_path):
    """Write extrinsics to a text file in the original format"""
    extrinsics_line = " ".join(map(str, config["extrinsics"]["values"]))
    with open(output_path, 'w') as f:
        f.write(extrinsics_line + "\n")

def main():
    """Main function to handle command line arguments and export configurations"""
    if len(sys.argv) > 1:
        if sys.argv[1] == "--shell":
            # Export shell variables
            config = load_config()
            export_shell_vars(config)
        elif sys.argv[1] == "--python":
            # Export Python variables
            config = load_config()
            print(export_python_vars(config))
        elif sys.argv[1] == "--extrinsics":
            # Write extrinsics file
            config = load_config()
            if len(sys.argv) > 2:
                output_path = sys.argv[2]
            else:
                output_path = "../assets/extrinsics.txt"
            write_extrinsics_file(config, output_path)
            print(f"Extrinsics written to {output_path}")
        else:
            print("Usage: export_config.py [--shell|--python|--extrinsics [path]]")
            sys.exit(1)
    else:
        # Default: show configuration
        config = load_config()
        print(yaml.dump(config, default_flow_style=False))

if __name__ == "__main__":
    main() 